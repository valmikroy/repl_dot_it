snippet #! "#!/usr/bin/env ruby" b
#!/usr/bin/env ruby
$0
endsnippet

snippet def "def <name>..."
def ${1:function_name}${2:(${3:arg})}
	$0
end
endsnippet

snippet module "module"
module ${1:`!p snip.rv = snip.basename.title().replace('_', '')`}
	$0
end
endsnippet

snippet jsonReadWrite  "block json parse"
require 'json'
json_object = JSON.parse(File.read(${1:file.json}))

File.open(${2:file.json},"w") do |f|
  f.write(JSON.pretty_generate(${3:json_hash}))
end
endsnippet


snippet promptSelection1 "Enumerated select list"
require "tty-prompt"


prompt = TTY::Prompt.new
choices = %w(emacs nano vim)
editor = prompt.enum_select("Select an editor?", choices)
puts "#{editor} is the editor of my choice"
endsnippet



snippet singleton "create a singlton class"

module ${0:YourClass} # :nodoc:

  # This is singleton which will hold logger object and other default
  # parameters backed by environment variables if needed ( like ENV['VERBOSE'] )
  class << self
    # logger object instance will get stored here
    attr_accessor :logger

    # verbosity managed by env variable
    # @return [Boolean]
    def verbose?
      ENV['VERBOSE'] ? true : false
    end

    # Create instance of logger object according to defined verbosity
    # @params [Boolean] this defines verbosity at runtime
    #                   if not provided then ENV['VERBOSE'] will be read
    #                   default: nil
    # @return [Logger]
    def default_logger(v = nil)
      v = verbose? if v.nil?
      logger = Logger.new(STDOUT)
      logger.level = Logger::INFO
      logger.level = Logger::DEBUG if v
      logger
    end

    # Find top level directory of gem development environment, this comes
    # handy during writing test cases
    # @return [String]
    def source_root
      @source_root ||= Pathname.new(File.expand_path('../../', __FILE__))
    end

    # Is this script attached to tty ?
    # @return [Boolean]
    def tty?
      $stdout.tty?
    end

		$0
  end
  
end

$0.logger = $0.default_logger

endsnippet


